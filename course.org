#+title: pybind: Python Bindings for C++
#+subtitle: Get the ease of use of Python with the speed of C++
#+author: Abhishek Dasgupta

* Introduction

Pybind (https://pybind11.readthedocs.io/) is a library that helps in
writing Python bindings for C++.

We can use this to create an interface for C++ code in Python, giving
us the speed of C++ with the ease of use of Python.

https://github.com/OxfordRSE/PybindCourse

* First run

Clone the repository

#+begin_src
git clone --recurse-submodules https://github.com/OxfordRSE/PybindCourse
#+end_src

The =--recurse-submodules= option to git fetches the pybind11 submodule.
If you missed passing this option, the submodule can always be fetched later:

#+begin_src
git submodule update --init
#+end_src

Source files in *src*: library.{cpp,hpp} main.cpp pybind.cpp

There are also files corresponding to the various
checkpoints in the code.

Open the files in your editor and have a look.
Then check that the project builds

** Using cmake

#+begin_src
cd PybindCourse
mkdir build && cd build
cmake ..  # once
cmake --build .
#+end_src

This should create barbadoop executable and pyBarbadoop cython package
in the /build/ folder.

** Using pip

One of the reasons for using pybind is so that users can easily
install packages using /pip/. This method is also supported. In the
PybindCourse folder:

1. Remove the =build= folder
2. Do =pip install --user .=

This will install a *barbadoop* module:

#+begin_src python
>>> import barbadoop
>>> barbadoop.factorial(20)
2192834560
#+end_src

The project structure will put the C++ module as pyBarbadoop within
barbadoop (~barbadoop.pyBarbadoop~). This allows one to mix Python and
C++ code.

* CMake configuration

#+begin_src cmake (CMakeLists.txt)
cmake_minimum_required(VERSION 3.13)
project(Barbadoop LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
add_compile_options(-Wall -pedantic -fPIC)

option(PYTHON_BINDINGS "Whether to build the Python bindings" ON)

set(Barbadoop_source  src/library.cpp)
set(Barbadoop_headers src/library.hpp)

add_library(Barbadoop ${Barbadoop_source} ${Barbadoop_headers})
add_executable(barbadoop src/main.cpp)
target_link_libraries(barbadoop PRIVATE Barbadoop)

if (PYTHON_BINDINGS)
    add_subdirectory(pybind11)
    pybind11_add_module(pyBarbadoop src/pybind.cpp)
    target_link_libraries(pyBarbadoop PRIVATE Barbadoop)
endif ()
#+end_src

** Note the name of the python module pyBarbadoop
It has to be the same name in the Python bindings file

* The Python bindings file

#+begin_src python (pybind.cpp)
#include <pybind11/pybind11.h>
#include "library.hpp"

namespace py = pybind11;

PYBIND11_MODULE(pyBarbadoop, m) {
    m.doc() = "PybindCourse module - barbadoop";
    m.def("factorial", &factorial, "Calculate factorial");
}
#+end_src


* Simple functions

Simple functions, such as ~factorial()~ above, where the parameters and
return types are basic types are easy to set up, add a ~m.def~
corresponding with a reference to the function.



** Exercise (15 minutes)
Implement a hypotenuse(a, b) function in the library and corresponding
Python binding. You should be able to call ~barbadoop.hypotenuse()~
from Python.

*Hint*: Math functions are in ~<cmath>~. Remember to add the function
to the import in =__init__.py=!

* Containers
  
What about containers? pybind supports standard C++ containers
natively, with an additional include header:

#+begin_src c++
#include <pybind11/stl.h>
#+end_src

After compiling and a pip install:

#+begin_src python
>>> import barbadoop
>>> fib10 = barbadoop.fibonacci(10)
>>> fib10
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55]
>>> type(fib10)
<class 'list'>
#+end_src

It works!

See https://pybind11.readthedocs.io/en/stable/advanced/cast/stl.html
for more examples for STL container bindings.
* Opaque types

Pybind's implementation of STL bindings are sufficient for most
purposes. It's simple for people writing bindings and works with
nested STLs, such as a list of lists or hash maps.

** Disadvantages

#+begin_quote
However, a fundamental limitation of this approach is that internal
conversions between Python and C++ types involve a copy operation that
prevents pass-by-reference semantics.
-- https://pybind11.readthedocs.io/en/stable/advanced/cast/stl.html#making-opaque-types
#+end_quote

The ~square_vector()~ function modifies a vector in place (squares it).

** Exercise (5 minutes)
What happens if you run ~square_vector()~ on a Python list?

** Solution
No change happens, as changes are not propagated back to Python.

** Make types opaque

By making types opaque, pybind does not convert to native Python types
and thus can be passed by reference. This is in a new header
=<pybind11/stl_bind.h>=:

#+begin_src c++ pybind.cpp
#include <pybind11/stl_bind.h>
PYBIND11_MAKE_OPAQUE(std::vector<int>);

// within PYBIND11_MODULE(pyBarbadoop, m)
py::bind_vector<std::vector<int>>(m, "VectorInt");
#+end_src c++

You can't pass =[1, 2, 3]= to ~square_vector()~ after this.
You'll need to wrap it:

#+begin_src python
>>> from barbadoop import square_vector, VectorInt
>>> a = VectorInt([1, 2, 3])  # now a is opaque
>>> square_vector(a)
>>> a
[1, 4, 9]
#+end_src
** Exercise (10 minutes)
Make ~std::vector<int>~ opaque, and check that references work correctly now.

* Named parameters

Python has the concept of named arguments, so I can say ~f(a=1, b=2)~
instead of ~f(1, 2)~ which also allows us to reorder parameters.

So far we have not been specifying parameter names, which meant we had
to pass them in the same order that C++ expects. We can inform pybind
of the argument names by specifying ~py::arg(name)~. There is a
shortcut using C++ user literals as well
(https://en.cppreference.com/w/cpp/language/user_literal). To use that:

Replace ~py::arg("name1"), py::arg("name2")~
with ~"name1"_a, "name2"_a~.

#+begin_src c++
namespace py = pybind11;
using namespace pybind11::literals; // add this!

// 1. no default arguments, short form of 2.
m.def("fibonacci", &fibonacci,
      "Calculate fibonacci series, first N numbers", "n"_a);
// 2. no default arguments, without user literals
m.def("fibonacci", &fibonacci,
      "Calculate fibonacci series, first N numbers", py::arg("n"));
// 3. with default arguments
m.def("fibonacci", &fibonacci,
      "Calculate fibonacci series, first N numbers", "n"_a = 10);
#+end_src c++

Pybind generates help messages for the bindings as well!

#+begin_src python
>>> import barbadoop
>>> help(barbadoop.hypotenuse)
#+end_src

** Exercise (10 minutes)
Add named arguments (and default arguments) to some functions of your
choice and try it out.

* Classes

Classes are defined similarly, except within an ~py::class~ function

If your class is named ~Pet~ ([[https://pybind11.readthedocs.io/en/stable/classes.html][example from documentation]]):

#+begin_src c++ pybind.cpp
py::class_<Pet>(m, "Pet")
  .def(py::init<const std::string &>())
  //            ^^ specify the types only of the constructor
  .def("setName", &Pet::setName)
  .def("getName", &Pet::getName)
  .def_readwrite("age", &Pet::age) // fields
  .def_readonly("colour", &Pet::colour) // const fields
  // Python property using getters and setters
  .def_property("name", &Pet::getName, &Pet::setName)
  // access using Pet.name
  .def_property_readonly("name", &Pet::getName)
;
#+end_src c++

** Exercise (10 minutes)
Copy =src/pybind_3_classes.cpp= to =src/pybind.cpp=.
This gives an example binding for the ~Date~ struct.
You can use this as a template.

Add bindings for the Person class.

* Wrapping up

All the material is available at
https://github.com/OxfordRSE/PybindCourse

Any questions, email me!
